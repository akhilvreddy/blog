<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Untagged on Akhil's Blog</title><link>https://akhilvreddy.github.io/blog/tags/untagged/</link><description>Recent content in Untagged on Akhil's Blog</description><generator>Hugo</generator><language>en</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Fri, 20 Jun 2025 11:01:04 -0400</lastBuildDate><atom:link href="https://akhilvreddy.github.io/blog/tags/untagged/index.xml" rel="self" type="application/rss+xml"/><item><title>Xavier vs He Init</title><link>https://akhilvreddy.github.io/blog/posts/2025/06/xavier-vs-he-init/</link><pubDate>Fri, 20 Jun 2025 11:01:04 -0400</pubDate><guid>https://akhilvreddy.github.io/blog/posts/2025/06/xavier-vs-he-init/</guid><description>&lt;h2 id="-the-problem">🧠 The Problem&lt;/h2>
&lt;p>When training neural nets, bad weight initialization leads to exploding/vanishing gradients.&lt;/p>
&lt;h2 id="-xavier-initialization">📐 Xavier Initialization&lt;/h2>
&lt;ul>
&lt;li>Designed for tanh / sigmoid&lt;/li>
&lt;li>Keeps variance consistent across layers&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Formula:&lt;/strong>&lt;/p>
&lt;p>$$ W \sim \mathcal{U}\left(-\frac{\sqrt{6}}{\sqrt{n_{in} + n_{out}}}, \frac{\sqrt{6}}{\sqrt{n_{in} + n_{out}}} \right) $$&lt;/p>
&lt;h2 id="-he-initialization">⚡ He Initialization&lt;/h2>
&lt;ul>
&lt;li>Designed for ReLU&lt;/li>
&lt;li>Keeps forward activation variance high enough&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Formula:&lt;/strong>&lt;/p>
&lt;p>$$ W \sim \mathcal{N}\left(0, \frac{2}{n_{in}} \right) $$&lt;/p>
&lt;h2 id="-pytorch-example">🧪 PyTorch Example&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> torch.nn &lt;span style="color:#66d9ef">as&lt;/span> nn
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Xavier&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nn&lt;span style="color:#f92672">.&lt;/span>Linear(&lt;span style="color:#ae81ff">256&lt;/span>, &lt;span style="color:#ae81ff">128&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nn&lt;span style="color:#f92672">.&lt;/span>init&lt;span style="color:#f92672">.&lt;/span>xavier_uniform_(layer&lt;span style="color:#f92672">.&lt;/span>weight)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># He&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nn&lt;span style="color:#f92672">.&lt;/span>init&lt;span style="color:#f92672">.&lt;/span>kaiming_normal_(layer&lt;span style="color:#f92672">.&lt;/span>weight, nonlinearity&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;relu&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>