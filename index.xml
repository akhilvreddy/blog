<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Akhil's Blog</title><link>https://akhilvreddy.github.io/blog/</link><description>Recent content on Akhil's Blog</description><generator>Hugo</generator><language>en</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Fri, 20 Jun 2025 11:01:04 -0400</lastBuildDate><atom:link href="https://akhilvreddy.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Xavier vs He Init</title><link>https://akhilvreddy.github.io/blog/posts/2025/06/xavier-vs-he-init/</link><pubDate>Fri, 20 Jun 2025 11:01:04 -0400</pubDate><guid>https://akhilvreddy.github.io/blog/posts/2025/06/xavier-vs-he-init/</guid><description>&lt;h2 id="-the-problem">🧠 The Problem&lt;/h2>
&lt;p>When training neural nets, bad weight initialization leads to exploding/vanishing gradients.&lt;/p>
&lt;h2 id="-xavier-initialization">📐 Xavier Initialization&lt;/h2>
&lt;ul>
&lt;li>Designed for tanh / sigmoid&lt;/li>
&lt;li>Keeps variance consistent across layers&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Formula:&lt;/strong>&lt;/p>
&lt;p>$$ W \sim \mathcal{U}\left(-\frac{\sqrt{6}}{\sqrt{n_{in} + n_{out}}}, \frac{\sqrt{6}}{\sqrt{n_{in} + n_{out}}} \right) $$&lt;/p>
&lt;h2 id="-he-initialization">⚡ He Initialization&lt;/h2>
&lt;ul>
&lt;li>Designed for ReLU&lt;/li>
&lt;li>Keeps forward activation variance high enough&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Formula:&lt;/strong>&lt;/p>
&lt;p>$$ W \sim \mathcal{N}\left(0, \frac{2}{n_{in}} \right) $$&lt;/p>
&lt;h2 id="-pytorch-example">🧪 PyTorch Example&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> torch.nn &lt;span style="color:#66d9ef">as&lt;/span> nn
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Xavier&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nn&lt;span style="color:#f92672">.&lt;/span>Linear(&lt;span style="color:#ae81ff">256&lt;/span>, &lt;span style="color:#ae81ff">128&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nn&lt;span style="color:#f92672">.&lt;/span>init&lt;span style="color:#f92672">.&lt;/span>xavier_uniform_(layer&lt;span style="color:#f92672">.&lt;/span>weight)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># He&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nn&lt;span style="color:#f92672">.&lt;/span>init&lt;span style="color:#f92672">.&lt;/span>kaiming_normal_(layer&lt;span style="color:#f92672">.&lt;/span>weight, nonlinearity&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;relu&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>word2vec from scratch: Intuition to Implementation</title><link>https://akhilvreddy.github.io/blog/posts/2025/06/word2vec-from-scratch-intuition-to-implementation/</link><pubDate>Mon, 16 Jun 2025 18:12:56 -0400</pubDate><guid>https://akhilvreddy.github.io/blog/posts/2025/06/word2vec-from-scratch-intuition-to-implementation/</guid><description>&lt;p>Have you ever thought about how we teach machines which words are similar — and which ones aren’t? It&amp;rsquo;s wild to realize that our phones had smart autocomplete features &lt;em>decades&lt;/em> before modern AI tools like ChatGPT became mainstream.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Word embeddings laid the foundation for modern NLP models. Before transformer-style architectures took over (with their dynamic embeddings), Word2Vec was the go-to method for capturing the semantic meaning of words through dense (~ 100-300 dim) vectors.&lt;/p></description></item><item><title>About</title><link>https://akhilvreddy.github.io/blog/about/</link><pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate><guid>https://akhilvreddy.github.io/blog/about/</guid><description>&lt;p>Hugo is the &lt;strong>world’s fastest framework for building websites&lt;/strong>. It is written in Go.&lt;/p>
&lt;p>It makes use of a variety of open source projects including:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/russross/blackfriday">https://github.com/russross/blackfriday&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/alecthomas/chroma">https://github.com/alecthomas/chroma&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/muesli/smartcrop">https://github.com/muesli/smartcrop&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/spf13/cobra">https://github.com/spf13/cobra&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/spf13/viper">https://github.com/spf13/viper&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Learn more and contribute on &lt;a href="https://github.com/gohugoio">GitHub&lt;/a>.&lt;/p></description></item></channel></rss>