<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>My New Hugo Site</title><link>https://example.org/</link><description>Recent content on My New Hugo Site</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 20 Jun 2025 11:01:04 -0400</lastBuildDate><atom:link href="https://example.org/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating a New Theme</title><link>https://example.org/posts/creating-a-new-theme/</link><pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate><guid>https://example.org/posts/creating-a-new-theme/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.&lt;/p>
&lt;p>We&amp;rsquo;ll start with creating a new site with a very basic template. Then we&amp;rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.&lt;/p></description></item><item><title>Migrate to Hugo from Jekyll</title><link>https://example.org/posts/migrate-from-jekyll/</link><pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate><guid>https://example.org/posts/migrate-from-jekyll/</guid><description>&lt;h2 id="move-static-content-to-static">Move static content to &lt;code>static&lt;/code>&lt;/h2>
&lt;p>Jekyll has a rule that any directory not starting with &lt;code>_&lt;/code> will be copied as-is to the &lt;code>_site&lt;/code> output. Hugo keeps all static content under &lt;code>static&lt;/code>. You should therefore move it all there.
With Jekyll, something that looked like&lt;/p>
&lt;pre>&lt;code>‚ñæ &amp;lt;root&amp;gt;/
 ‚ñæ images/
 logo.png
&lt;/code>&lt;/pre>
&lt;p>should become&lt;/p>
&lt;pre>&lt;code>‚ñæ &amp;lt;root&amp;gt;/
 ‚ñæ static/
 ‚ñæ images/
 logo.png
&lt;/code>&lt;/pre>
&lt;p>Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as &lt;code>CNAME&lt;/code>) to be moved to &lt;code>static&lt;/code>.&lt;/p></description></item><item><title>Xavier vs He Init</title><link>https://example.org/posts/xavier-vs-he-init/</link><pubDate>Fri, 20 Jun 2025 11:01:04 -0400</pubDate><guid>https://example.org/posts/xavier-vs-he-init/</guid><description>&lt;h2 id="-the-problem">üß† The Problem&lt;/h2>
&lt;p>When training neural nets, bad weight initialization leads to exploding/vanishing gradients.&lt;/p>
&lt;h2 id="-xavier-initialization">üìê Xavier Initialization&lt;/h2>
&lt;ul>
&lt;li>Designed for tanh / sigmoid&lt;/li>
&lt;li>Keeps variance consistent across layers&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Formula:&lt;/strong>&lt;/p>
&lt;p>$$ W \sim \mathcal{U}\left(-\frac{\sqrt{6}}{\sqrt{n_{in} + n_{out}}}, \frac{\sqrt{6}}{\sqrt{n_{in} + n_{out}}} \right) $$&lt;/p>
&lt;h2 id="-he-initialization">‚ö° He Initialization&lt;/h2>
&lt;ul>
&lt;li>Designed for ReLU&lt;/li>
&lt;li>Keeps forward activation variance high enough&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Formula:&lt;/strong>&lt;/p>
&lt;p>$$ W \sim \mathcal{N}\left(0, \frac{2}{n_{in}} \right) $$&lt;/p>
&lt;h2 id="-pytorch-example">üß™ PyTorch Example&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> torch.nn &lt;span style="color:#66d9ef">as&lt;/span> nn
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Xavier&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nn&lt;span style="color:#f92672">.&lt;/span>Linear(&lt;span style="color:#ae81ff">256&lt;/span>, &lt;span style="color:#ae81ff">128&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nn&lt;span style="color:#f92672">.&lt;/span>init&lt;span style="color:#f92672">.&lt;/span>xavier_uniform_(layer&lt;span style="color:#f92672">.&lt;/span>weight)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># He&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nn&lt;span style="color:#f92672">.&lt;/span>init&lt;span style="color:#f92672">.&lt;/span>kaiming_normal_(layer&lt;span style="color:#f92672">.&lt;/span>weight, nonlinearity&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;relu&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Cr√©ation d'un nouveau th√®me</title><link>https://example.org/posts/creation-dun-nouveau-theme/</link><pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate><guid>https://example.org/posts/creation-dun-nouveau-theme/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Ce tutoriel vous montrera comment cr√©er un th√®me simple pour Hugo. Je suppose que vous √™tes familier avec HTML, la ligne de commande bash, et que vous √™tes √† l&amp;rsquo;aise avec Markdown pour formater le contenu. Je vais expliquer comment Hugo utilise des mod√®les et comment vous pouvez organiser vos mod√®les pour cr√©er un th√®me. Je ne couvrirai pas l&amp;rsquo;utilisation de CSS pour styliser votre th√®me.&lt;/p>
&lt;p>Nous allons commencer par cr√©er un nouveau site avec un mod√®le tr√®s basique. Ensuite, nous ajouterons quelques pages et des publications. Avec de petites variations, vous pourrez cr√©er de nombreux types de sites web.&lt;/p></description></item><item><title>About</title><link>https://example.org/about/</link><pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate><guid>https://example.org/about/</guid><description>&lt;p>Hugo is the &lt;strong>world‚Äôs fastest framework for building websites&lt;/strong>. It is written in Go.&lt;/p>
&lt;p>It makes use of a variety of open source projects including:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/russross/blackfriday">https://github.com/russross/blackfriday&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/alecthomas/chroma">https://github.com/alecthomas/chroma&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/muesli/smartcrop">https://github.com/muesli/smartcrop&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/spf13/cobra">https://github.com/spf13/cobra&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/spf13/viper">https://github.com/spf13/viper&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Learn more and contribute on &lt;a href="https://github.com/gohugoio">GitHub&lt;/a>.&lt;/p></description></item><item><title>(Hu)go Template Primer</title><link>https://example.org/posts/goisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://example.org/posts/goisforlovers/</guid><description>&lt;p>Hugo uses the excellent &lt;a href="https://golang.org/">Go&lt;/a> &lt;a href="https://golang.org/pkg/html/template/">html/template&lt;/a> library for
its template engine. It is an extremely lightweight engine that provides a very
small amount of logic. In our experience that it is just the right amount of
logic to be able to create a good static website. If you have used other
template systems from different languages or frameworks you will find a lot of
similarities in Go templates.&lt;/p>
&lt;p>This document is a brief primer on using Go templates. The &lt;a href="https://golang.org/pkg/html/template/">Go docs&lt;/a>
provide more details.&lt;/p></description></item><item><title>D√©buter avec Hugo</title><link>https://example.org/posts/debuter-avec-hugo/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://example.org/posts/debuter-avec-hugo/</guid><description>&lt;h2 id="√©tape-1-installer-hugo">√âtape 1. Installer Hugo&lt;/h2>
&lt;p>Allez sur la page de t√©l√©chargements de
&lt;a href="https://github.com/spf13/hugo/releases">hugo&lt;/a> et t√©l√©chargez la version
appropri√©e √† votre syst√®me d&amp;rsquo;exploitation et votre architecture.&lt;/p>
&lt;p>Sauvegardez le fichier t√©l√©charg√© √† un endroit pr√©cis, afin de l&amp;rsquo;utiliser dans
l&amp;rsquo;√©tape suivante.&lt;/p>
&lt;p>Des informations plus compl√®tes sont disponibles sur la page
&lt;a href="https://example.org/overview/installing/">installing hugo&lt;/a>&lt;/p></description></item><item><title>Getting Started with Hugo</title><link>https://example.org/posts/hugoisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://example.org/posts/hugoisforlovers/</guid><description>&lt;h2 id="step-1-install-hugo">Step 1. Install Hugo&lt;/h2>
&lt;p>Go to &lt;a href="https://github.com/spf13/hugo/releases">Hugo releases&lt;/a> and download the
appropriate version for your OS and architecture.&lt;/p>
&lt;p>Save it somewhere specific as we will be using it in the next step.&lt;/p>
&lt;p>More complete instructions are available at &lt;a href="https://gohugo.io/getting-started/installing/">Install Hugo&lt;/a>&lt;/p>
&lt;h2 id="step-2-build-the-docs">Step 2. Build the Docs&lt;/h2>
&lt;p>Hugo has its own example site which happens to also be the documentation site
you are reading right now.&lt;/p>
&lt;p>Follow the following steps:&lt;/p>
&lt;ol>
&lt;li>Clone the &lt;a href="http://github.com/spf13/hugo">Hugo repository&lt;/a>&lt;/li>
&lt;li>Go into the repo&lt;/li>
&lt;li>Run hugo in server mode and build the docs&lt;/li>
&lt;li>Open your browser to http://localhost:1313&lt;/li>
&lt;/ol>
&lt;p>Corresponding pseudo commands:&lt;/p></description></item><item><title>Introduction aux mod√®les (Hu)go</title><link>https://example.org/posts/introduction-aux-modeles-hugo/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://example.org/posts/introduction-aux-modeles-hugo/</guid><description>&lt;p>Hugo utilise l&amp;rsquo;excellente librairie &lt;a href="http://golang.org/">go&lt;/a> &lt;a href="http://golang.org/pkg/html/template/">html/template&lt;/a> pour
son moteur de mod√®les. c&amp;rsquo;est un moteur extr√™mement l√©ger qui offre un tr√®s petit
nombre de fonctions logiques. √Ä notre exp√©rience, c&amp;rsquo;est juste ce qu&amp;rsquo;il faut pour
cr√©er un bon site web statique. Si vous avez d√©j√† utilis√© d&amp;rsquo;autre moteurs de
mod√®les pour diff√©rents langages ou frameworks, vous allez retrouver beaucoup de
similitudes avec les mod√®les go.&lt;/p>
&lt;p>Ce document est une introduction sur l&amp;rsquo;utilisation de Go templates. La
&lt;a href="http://golang.org/pkg/html/template/">documentation go&lt;/a> fourni plus de d√©tails.&lt;/p></description></item><item><title>Migrer vers Hugo depuis Jekyll</title><link>https://example.org/posts/migrer-vers-hugo-depuis-jekyll/</link><pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate><guid>https://example.org/posts/migrer-vers-hugo-depuis-jekyll/</guid><description>&lt;h2 id="d√©placez-le-contenu-statique-vers-static">D√©placez le contenu statique vers &lt;code>static&lt;/code>&lt;/h2>
&lt;p>Jekyll a une r√®gle comme quoi tout r√©pertoire qui ne commence pas par &lt;code>_&lt;/code> sera
copi√© tel-quel dans le r√©pertoire &lt;code>_site&lt;/code>. Hugo garde tout le contenu statique
dans le r√©pertoire &lt;code>static&lt;/code>. Vous devez donc d√©placer tout ce type de contenu
l√†-dedans. Avec Jekylll, l&amp;rsquo;arborescence ressemblant √† ceci :&lt;/p>
&lt;pre>&lt;code>‚ñæ &amp;lt;root&amp;gt;/
 ‚ñæ images/
 logo.png
&lt;/code>&lt;/pre></description></item></channel></rss>